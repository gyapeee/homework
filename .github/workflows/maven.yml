name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '30 10-20 * * *'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: maven-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-${{ runner.os }}-

      - name: Build with Maven
        run: mvn clean compile

      - name: Save build artifacts
        uses: actions/cache@v3
        with:
          path: target
          key: build-${{ github.run_id }}

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Restore Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: maven-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-${{ runner.os }}-

      - name: Restore build artifacts
        uses: actions/cache@v3
        with:
          path: target
          key: build-${{ github.run_id }}

      - name: CI with Selenium
        run: mvn test -DconfigFile=config/config.properties

      - name: Set Allure Environment Variables
        run: |
          ENV_FILE="target/allure-results/environment.properties"  # Define the full path

          mkdir -p "$(dirname "$ENV_FILE")"  # Ensure the directory exists

          # Create the file if it doesn't exist
          [ ! -f "$ENV_FILE" ] && touch "$ENV_FILE"

          echo "GitHub Run ID=${{ github.run_id }}" > "$ENV_FILE"
          echo "GitHub Actions URL=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> "$ENV_FILE"
          echo "GitHub Repository=${{ github.repository }}" >> "$ENV_FILE"
          echo "GitHub Branch=${{ github.ref }}" >> "$ENV_FILE"
          echo "GitHub Actor=${{ github.actor }}" >> "$ENV_FILE"
          echo "GitHub Workflow=${{ github.workflow }}" >> "$ENV_FILE"
          echo "Tested Browser=Chrome" >> "$ENV_FILE"
          echo "Java Version=$(java -version 2>&1 | awk -F '\"' '/version/ {print $2}')" >> "$ENV_FILE"
          echo "OS=$(uname -s)" >> "$ENV_FILE"
          echo "Test Environment=Staging" >> "$ENV_FILE"
          echo "Build Version=1.0.${{ github.run_number }}" >> "$ENV_FILE"
          echo "Execution Mode=Headless" >> "$ENV_FILE"
          echo "Platform Type=Desktop" >> "$ENV_FILE"


      - name: Cache Allure results
        uses: actions/cache@v3
        with:
          path: target/allure-results
          key: allure-results-${{ github.run_id }}

  report:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Restore Allure results
        uses: actions/cache@v3
        with:
          path: target/allure-results
          key: allure-results-${{ github.run_id }}

      - name: Build test report
        uses: simple-elf/allure-report-action@v1.7
        if: always()
        with:
          gh_pages: allure-history
          allure_history: allure-history
          allure_results: target/allure-results

      - name: Publish test report
        uses: peaceiris/actions-gh-pages@v3
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: allure-history
          publish_dir: allure-history